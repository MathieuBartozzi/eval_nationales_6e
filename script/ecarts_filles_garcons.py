# üì¶ Imports
import pandas as pd
import numpy as np
import os
import plotly.express as px
import plotly.io as pio
import imageio.v2 as imageio
from PIL import Image
import matplotlib.pyplot as plt



# üìÇ Chargement des donn√©es
df = pd.read_csv("../data/raw/evaluations_6e.csv", sep=";")
df_geoloc = pd.read_csv("../data/raw/annuaire.csv", sep=";")


# üßº Nettoyage et agr√©gation
def preparer_donnees_agrandies(df: pd.DataFrame) -> pd.DataFrame:
    col_to_keep = [
        'Ann√©e', 'Libell√© r√©gion acad√©mique', 'Libell√© acad√©mie',
        'Libell√© d√©partement', 'UAI', 'Libell√© secteur',
        'Mati√®re', 'Caract√©ristique', 'Effectif', 'Score moyen', 'Ecart type',
        'Groupe 1', 'Groupe 2', 'Groupe 3', 'Groupe 4', 'Groupe 5', 'Groupe 6'
    ]
    df = df[col_to_keep].copy()
    df["pond_score"] = df["Score moyen"] * df["Effectif"]
    group_cols = [
        "Ann√©e", "UAI", "Mati√®re", "Caract√©ristique",
        "Libell√© acad√©mie", "Libell√© d√©partement", "Libell√© r√©gion acad√©mique", "Libell√© secteur"
    ]
    df_grouped = df.groupby(group_cols, as_index=False).agg({
        "Effectif": "sum",
        "pond_score": "sum",
        "Ecart type": "mean",
        **{f"Groupe {i}": "sum" for i in range(1, 7)}
    })
    df_grouped["Score moyen"] = df_grouped["pond_score"] / df_grouped["Effectif"]
    return df_grouped.drop(columns=["pond_score"])

df_grouped = preparer_donnees_agrandies(df)

# üåç Filtrage g√©ographique
def filtrer_france_metropolitaine(df, lat_col="latitude", lon_col="longitude"):
    return df[df[lat_col].between(41, 51) & df[lon_col].between(-6, 10)].copy()

df_geoloc = filtrer_france_metropolitaine(df_geoloc)

# üìç Localisation des √©tablissements
def localiser_etablissements(df_grouped: pd.DataFrame, df_geoloc: pd.DataFrame, keep_columns=None) -> pd.DataFrame:
    if keep_columns is None:
        keep_columns = ["latitude", "longitude", "Nom_etablissement"]
    df_geo_college = df_geoloc[df_geoloc["Type_etablissement"].str.lower().str.contains("coll√®ge", na=False)].copy()
    df_geo_college = df_geo_college.rename(columns={"Identifiant_de_l_etablissement": "UAI"})
    df_geo_clean = df_geo_college.drop_duplicates(subset="UAI")
    cols_to_merge = ["UAI"] + [col for col in keep_columns if col in df_geo_clean.columns]
    return df_grouped.merge(df_geo_clean[cols_to_merge], on="UAI", how="left")

df_localise = localiser_etablissements(df_grouped, df_geoloc, keep_columns=["latitude", "longitude", "Nom_etablissement"])

# üëßüë¶ Fusion filles/gar√ßons
def fusion_filles_garcons(df: pd.DataFrame) -> pd.DataFrame:
    filles = df[df["Caract√©ristique"].str.lower() == "fille"].copy()
    garcons = df[df["Caract√©ristique"].str.lower() == "gar√ßon"].copy()
    filles = filles.rename(columns={"Score moyen": "Score moyen_fille"})
    garcons = garcons.rename(columns={"Score moyen": "Score moyen_gar√ßon"})
    fusion = pd.merge(
        filles[["UAI", "Ann√©e", "Mati√®re", "Score moyen_fille"]],
        garcons[["UAI", "Ann√©e", "Mati√®re", "Score moyen_gar√ßon"]],
        on=["UAI", "Ann√©e", "Mati√®re"],
        how="inner"
    )
    fusion["Ecart_score"] = fusion["Score moyen_fille"] - fusion["Score moyen_gar√ßon"]
    return fusion

df_ecarts = fusion_filles_garcons(df_grouped)
df_ecarts_geo = df_ecarts.merge(df_localise, on=["UAI", "Ann√©e", "Mati√®re"], how="left")


def export_heatmaps_duales_par_annee(df, matiere="Math√©matiques", dossier="heatmaps_dual"):
    os.makedirs(dossier, exist_ok=True)
    annees = sorted(df["Ann√©e"].unique())

    for annee in annees:
        dff = df[
            (df["Ann√©e"] == annee) &
            (df["Mati√®re"] == matiere) &
            df["latitude"].notna() &
            df["longitude"].notna()
        ].copy()

        df_recul = dff.copy()
        df_avantage = dff.copy()
        df_recul["Avantage_garcons"] = df_recul["Ecart_score"].apply(lambda x: abs(x) if x < 0 else 0)
        df_avantage["Avantage_filles"] = df_avantage["Ecart_score"].apply(lambda x: abs(x) if x > 0 else 0)

        fig_recul = px.density_map(
            df_recul,
            lat="latitude", lon="longitude", z="Avantage_garcons",
            radius=8, center={"lat": 46.5, "lon": 2.5}, zoom=4.7,
            color_continuous_scale="Tealgrn", range_color=(0, 20),
            title=f"{annee} ‚Äì Etablissements avec avantage gar√ßons (score moyen G > F)"
        )
        fig_recul.update_layout(mapbox_style="open-street-map")
        fig_recul.update_layout(coloraxis_colorbar=dict(title="√âcart (G - F)"))


        fig_avantage = px.density_map(
            df_avantage,
            lat="latitude", lon="longitude", z="Avantage_filles",
            radius=8, center={"lat": 46.5, "lon": 2.5}, zoom=4.7,
            color_continuous_scale="OrRd", range_color=(0, 20),
            title=f"{annee} ‚Äì Etablissements avec avantage filles (score moyen F > G)"
        )
        fig_avantage.update_layout(mapbox_style="open-street-map")
        fig_avantage.update_layout(coloraxis_colorbar=dict(title="√âcart (F - G)"))


        path_recul = os.path.join(dossier, f"recul_{annee}.png")
        path_avantage = os.path.join(dossier, f"avantage_{annee}.png")
        pio.write_image(fig_recul, path_recul, width=800, height=900)
        pio.write_image(fig_avantage, path_avantage, width=800, height=900)

        # # üß© Fusion des deux images horizontalement
        img1 = Image.open(path_recul)
        img2 = Image.open(path_avantage)
        fusion = Image.new("RGB", (img1.width + img2.width, max(img1.height, img2.height)))
        fusion.paste(img1, (0, 0))
        fusion.paste(img2, (img1.width, 0))


 # G√©n√®re la courbe de suivi jusqu'√† l‚Äôann√©e courante
        generer_graphe_proportions_par_annee(df, annee, matiere, dossier="graph_proportions")
        graph_img = Image.open(f"graph_proportions/courbe_{annee}.png")


        final = Image.new("RGB", (fusion.width, fusion.height + graph_img.height), color="white")
        final.paste(fusion, (0, 0))
        final.paste(graph_img, ((fusion.width - graph_img.width) // 2, fusion.height))

        # Sauvegarde l'image pour le GIF
        fusion_path = os.path.join(dossier, f"heatmap_{annee}.png")
        final.save(fusion_path)

        # Supprime les interm√©diaires
        os.remove(path_recul)
        os.remove(path_avantage)
        os.remove(f"graph_proportions/courbe_{annee}.png")


def generer_graphe_proportions_par_annee(df_ecarts, annee, matiere="Math√©matiques", dossier="graph_proportions"):
    import matplotlib.pyplot as plt
    os.makedirs(dossier, exist_ok=True)

    # Pr√©paration des donn√©es
    df = df_ecarts[df_ecarts["Mati√®re"] == matiere].copy()
    df["F_>_G"] = df["Ecart_score"] > 0
    df["G_>_F"] = df["Ecart_score"] < 0

    df_counts = df.groupby("Ann√©e").apply(lambda x: pd.Series({
        "total": x["UAI"].nunique(),
        "F_sup_G": x.loc[x["Ecart_score"] > 0, "UAI"].nunique(),
        "G_sup_F": x.loc[x["Ecart_score"] < 0, "UAI"].nunique()
    })).reset_index()
    df_counts["% F > G"] = 100 * df_counts["F_sup_G"] / df_counts["total"]
    df_counts["% G > F"] = 100 * df_counts["G_sup_F"] / df_counts["total"]

    # Cr√©e une structure d'ann√©es fixes 2017-2024
    full_years = pd.DataFrame({"Ann√©e": list(range(2017, 2025))})
    df_all = full_years.merge(df_counts, on="Ann√©e", how="left")
    df_all["Ann√©e"] = df_all["Ann√©e"].astype(str)
    df_plot = df_all[df_all["Ann√©e"].astype(int) <= annee]

    # Cr√©ation du graphique
    plt.figure(figsize=(8, 3))
    plt.plot(df_plot["Ann√©e"], df_plot["% F > G"], marker="o", label="% F > G", color="orangered")
    plt.plot(df_plot["Ann√©e"], df_plot["% G > F"], marker="o", label="% G > F", color="steelblue")

    # Ajout de points invisibles pour forcer l'axe complet 2017-2024
    plt.plot(df_all["Ann√©e"], [0]*len(df_all), alpha=0)  # bas
    plt.plot(df_all["Ann√©e"], [100]*len(df_all), alpha=0)  # haut

    plt.title(f"√âvolution de la proportion de coll√®ges selon l‚Äôavantage de performance en math√©matiques (filles vs gar√ßons)", wrap=True)
    plt.ylabel("Proportion (%)")
    plt.xlabel("Ann√©e")
    plt.ylim(0, 100)
    plt.xticks(rotation=0)
    plt.grid(True, linestyle="--", alpha=0.3)
    plt.legend(loc="center right")
    plt.tight_layout()

    path = os.path.join(dossier, f"courbe_{annee}.png")
    plt.savefig(path, dpi=100)
    plt.close()




def creer_gif_dual(dossier="heatmaps_dual", gif_path="ecarts_dual.gif", fps=1):
    fichiers = sorted([f for f in os.listdir(dossier) if f.startswith("heatmap_") and f.endswith(".png")])
    images = [imageio.imread(os.path.join(dossier, f)) for f in fichiers]
    imageio.mimsave(gif_path, images, fps=fps)


if __name__ == "__main__":
    df_grouped = preparer_donnees_agrandies(df)
    df_geoloc = filtrer_france_metropolitaine(df_geoloc)
    df_localise = localiser_etablissements(df_grouped, df_geoloc, keep_columns=["latitude", "longitude", "Nom_etablissement"])
    df_ecarts = fusion_filles_garcons(df_grouped)
    df_ecarts_geo = df_ecarts.merge(df_localise, on=["UAI", "Ann√©e", "Mati√®re"], how="left")

    export_heatmaps_duales_par_annee(df_ecarts_geo, matiere="Math√©matiques")
    creer_gif_dual()
